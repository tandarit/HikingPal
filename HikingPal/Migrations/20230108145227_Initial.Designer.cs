// <auto-generated />
using System;
using HikingPal.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HikingPal.Migrations
{
    [DbContext(typeof(HikingPalDataContext))]
    [Migration("20230108145227_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HikingPal.Models.Hike", b =>
                {
                    b.Property<Guid>("HikeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HikeID");

                    b.HasIndex("AuthorID");

                    b.ToTable("Hikes");
                });

            modelBuilder.Entity("HikingPal.Models.HikeUser", b =>
                {
                    b.Property<Guid>("HikeUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HikeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HikeUserID");

                    b.HasIndex("HikeID");

                    b.HasIndex("UserID");

                    b.ToTable("HikeUsers");
                });

            modelBuilder.Entity("HikingPal.Models.Role", b =>
                {
                    b.Property<Guid>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = new Guid("6adeed17-6576-4d08-b4a4-9a4a123c4373"),
                            RoleDescription = "Rules everythings.",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleID = new Guid("d442cc17-6767-4c94-a963-ee8a40b7a1a5"),
                            RoleDescription = "A simple Hiker.",
                            RoleName = "Hiker"
                        },
                        new
                        {
                            RoleID = new Guid("f57aae41-9459-4d9f-b22d-bec35b4863db"),
                            RoleDescription = "A simple organiser who can organise hiking.",
                            RoleName = "Organiser"
                        });
                });

            modelBuilder.Entity("HikingPal.Models.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Iteration")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HikingPal.Models.Hike", b =>
                {
                    b.HasOne("HikingPal.Models.User", "Author")
                        .WithMany("HikeAutors")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("HikingPal.Models.HikeUser", b =>
                {
                    b.HasOne("HikingPal.Models.Hike", "Hike")
                        .WithMany("HikeUsers")
                        .HasForeignKey("HikeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HikingPal.Models.User", "User")
                        .WithMany("HikeUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hike");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HikingPal.Models.User", b =>
                {
                    b.HasOne("HikingPal.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("HikingPal.Models.Hike", b =>
                {
                    b.Navigation("HikeUsers");
                });

            modelBuilder.Entity("HikingPal.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("HikingPal.Models.User", b =>
                {
                    b.Navigation("HikeAutors");

                    b.Navigation("HikeUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
